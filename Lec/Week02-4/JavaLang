package Week02Th;

import java.math.BigDecimal;
import java.util.StringJoiner;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.event.SwingPropertyChangeSupport;

public class JavaLang {
    public static void main(String[] args) {
        Value v1 = new Value(10);
        Value v2 = new Value(10);

        if(v1.equals(v2)) {
            System.out.println("같은 객체");
        } else {
            System.out.println("다른 객체");
        }

        v2 = v1;
        
        if(v1.equals(v2)) {
            System.out.println("같은 객체");
        } else {
            System.out.println("다른 객체");
        }
    }
}

class Value {
    int value;
    Value(int value) {
        this.value = value;
    }
}

class Person {
    long id;  // Person의 id값을

    Person(long id) { // (long id) 생성자로 받았다
        this.id = id;
    }

    //EqualsEx2의 if(p1.equals(p2))
    // 오버라이딩 
    public boolean equals(Object obj) {
        if(obj != null && obj instanceof Person) { // null이 아니면서 Person이라는 instane해야 한다
            return id == ((Person)obj).id; // 그럴 경우에는 id값만 비교해서
        } else {
            return false;
        }
    }
}
class EqualsEx2 {
    public static void main(String[] args) {
        Person p1 = new Person(8602192222111L); // Person
        Person p2 = new Person(8602192222111L);
        if(p1 == p2) {
            System.out.println("같은 객체");
        } else {
            System.out.println("다른 객체");
        }
        if(p1.equals(p2)) {
            System.out.println("같은 값"); // 참이면 같은 값
        } else {
            System.out.println("다른 값");
        }
    }
}

class HashCodeEx1 {
    public static void main(String[] args) {
        String str1 = new String("abc");
        String str2 = new String("abc");

        System.out.println(str1.equals(str2));
        System.out.println(str1.hashCode());
        System.out.println(str2.hashCode());
        System.out.println(System.identityHashCode(str1));
        System.out.println(System.identityHashCode(str2));
    }
}

class Card{
    String kind;
    int num;

    Card() {
        this("SPADE", 1);
    }

    Card(String kind, int num) {
        this.kind = kind;
        this.num = num;
    }

    public String toString() {
        return "kind: " +kind +", num: "+num;
    }
    @Override
    public Card clone() {
        Object obj = null;
        try {
            obj = super.clone();
        } catch (Exception e) {
            
        }
        return (Card)obj ;
    }
}
class CardToString {
    public static void main(String[] args) {
        Card c1 = new Card();
        Card c2 = new Card();
        Card c3 = c2.clone();

        System.out.println(c1.toString());
        System.out.println(c2.toString());
        // System.out.println(c3.toString());
        // System.out.println(c1.kind);
        // System.out.println(c1.num);
        
        int[] arr = {1,2,3,4,5};
        int[] arrClone = arr.clone();

        for (int i = 0; i < arrClone.length; i++) {
            System.out.println(arrClone[i]);
        }

        Card card = new Card();
        // 생성된 객체로부터 얻음
        Class c0bj = new Card().getClass();
        // 클래스 리터럴(*.class)로부터 얻음
        c0bj = Card.class;
        try {
            c0bj = Class.forName("Card");  // 클래스 이름으로부터 얻음, 특정 클래스 파일을 메모리에 올릴 때 주로 사용 (ex: DB driver)
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        String ani = "dog, cat, bear";
        String[] arr2 = ani.split(", ");
        String str = String.join("-", arr2);
        System.out.println(str);

        StringJoiner sj = new StringJoiner("," , "[", "]");
        String[] strArr = {"aaa", "bbb" , "ccc"};

        for(String string : strArr) {
            sj.add (string.toUpperCase());
        } System.out.println(sj.toString());      
    }   
}

//https://us02web.zoom.us/j/83600488365?pwd=R0VRUHZmY1hRYTJvSUFlK3V4MlBBQT09

class RegularEx1 {
    public static void main(String[] args) {
        String[] data = {"bat", "baby", "bonus", "cA"};
        Pattern p = Pattern.compile("c[a-zA-Z]*");
        for (int i = 0; i < data.length; i++) {
            Matcher m = p.matcher(data[i]);
            if(m.matches())
                System.out.print(data[i] + ", ");
        }
    }
}

class StringTokenizerEx1 {
    public static void main(String[] args) {
        String sources = "100, 200, 300, 400";
        StringTokenizer st = StringTokenizer(sources,",");
        while(st.hasMoreTokens()) {
            System.out.println(st.nextToken());
        }
        BigDecimal val;
        val = new BigDecimal("123,4567890");
      
        System.out.println(val.intValue());
        System.out.println(val.longValue());
        System.out.println(val.precision());
}

    private static StringTokenizer StringTokenizer(String sources, String string) {
        return null;
    }
}
//얕은 복사 깊은 복사 예제 안함 
