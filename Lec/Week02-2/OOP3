package Week02T;

import java.net.InterfaceAddress;

//import Week01W.Animal;

public class OOP3 {
    public static void main(String[] args) {
        // Parent p = new Parent();
        // System.out.println(p instanceof Object);
        // System.out.println(p instanceof Parent);
        // System.out.println(p instanceof Child);
        // System.out.println();

        // Parent c = new Child();
        // System.out.println(c instanceof Object);
        // System.out.println(c instanceof Parent);
        // System.out.println(c instanceof Child);

        // Parent pa01 = null;
        // Child ch = new Child();
        // Parent pa02 = new Parent();
        // Brother br = null;

        // pa01 = ch;  // pa01 = (Parent)ch;와 같고 타입 변환을 생략할 수 있다
        // // br = pa02; //error 
        // br = (Brother) pa02; // 타입 변환을 생략할 수 없다
        // // br = (Brother) ch; // 직접적인 상속 관계가 아니기 때문에 error 
        // br = (Brother) (Parent) ch;

        // Employee[] tekcom = new Employee[5];
        // // tekcom[0] = new Employee();
        // // tekcom[1] = new Employee();

        // for (int i = 0; i < tekcom.length; i++) {
        //     tekcom[i] = new Employee();
        // }
        // for (int i = 0; i < tekcom.length; i++) {
        //     System.out.println(tekcom[i]);
        // }
        // Employee[] newcom = new Employee[5];
        // tekcom[0] = new Employee("왕가네", 38);
        // tekcom[1] = new Employee("김팀장", 35);
        // tekcom[2] = new Employee("아무래", 28);
        // tekcom[3] = new Employee("최고참", 46);

        // for (int i = 0; i < newcom.length; i++) {
        //     newcom[i] = new Employee();
        //     newcom[i].setAge(tekcom[i].getAge());
        //     newcom[i].setName(tekcom[i].getName());
        // }

        // newcom[0].setName("홍로인");
        // newcom[1].setName("고라니");

        // System.out.println("==== 처음 객체 배열 ====");
        // for (int i = 0; i < tekcom.length; i++) {
        //     System.out.println(tekcom[i].getName());
        // }
        // System.out.println("==== 복사한 객체 배열 ====");
        // for (int i = 0; i < newcom.length; i++) {
        //     System.out.println(tekcom[i].getName());
        // }

    }
}
// class Parent {}
// class Child extends Parent {}
// class Brother extends Parent {}

// Parent 여러개 상속하고 싶은데
// Parent() Child extends Parent/ P2() P3() Child extends P2 P3는 자바에서 지원하지 않는다 부모는 하나만 지원하게 한다
// 이런 경우 인터페이스 사용 

// 추상 클래스와 인터페이스의 차이점 : 추상클래스에는 추상메소드만 있는 것이 아니라 일반 메소드와 일반 변수도 있다 인터페이스는 모든 메소드와 모든 변수는 다 추상이어야 한다
// (사이트) 자식 클래스가 여러 부모 클래스를 상속받을 수 있다면 다양한 도작을 수행할 수 있다는 장점. 하지만 메소드 출처의 모호성 등 여러가지 문제 발생 가능성이 있어서 다중 상속은 지원하지 않는다. 하지만 다중 상속의 이점을 바랄 수는 없기에 자바에서는 인터페이스라는 것을 통해 다중 상속을 지원하고 있다. 인터페이스는 오로지 추상 메소드와 상수만을 포함할 수 있다
// 추상클래스 = iv+im+생성자+추상메서드 / 인터페이스 = 추상메서드(iv xx) + 상수

// 객체 배열
// class Employee {
//     private String name;
//     private int age;

//     public Employee() { }
//     public Employee(String name, int age) {
//         this.name = name;
//         this.age = age;
//         // this.setName(name);
//         // this.setAge(age);
//     }
//     public String getName() {
//         return name;
//     }
//     public void setName(String name){
//         this.name = name;
//     }
//     public int getAge() {
//         return age;
//     }
//     public void setAge(int age) {
//         this.age = age;
//     }
// }


// 추상클래스 
// abstract class Player {
//     boolean pause; // 일시정지 상태를 저장하기 위한 변수
//     int currentPos; // 현제 play되고  있는 위치를 저장하기 위한 변수

//     Player() { // 추상클래스도 생성자가 있어야 함
//         // 초기값 세팅
//         pause = false;
//         currentPos = 0;
//     }
//     // 추상 메소드      
//     abstract void play(int pos); // void는 return 타입
//     abstract void stop(); // abstract void stop() {// 몸체는 없다 // 매개변수는 뭐가 들어오고 return 타입은 어떻게 된 형태로 되면 좋겠어 구체적 형태는 모르겠지만 상속을 받아서 만들면 사용할 수 있어의 의미}
//     void play() {
//         play(currentPos);
//     }
//     void pause() {
//         if(pause) {
//             pause = false;
//             play(currentPos);
//         } else {
//             pause = true;
//             stop();
//         }
//     }
// }

// class MP3Player extends Player { // MP3Player를 만드려는 추상적인 개념이었던 Player
//     void play(int cureentPos) {
//            /* 조상의 추상메서드를 구현 */
//     }
//     void stop() {
//            /* 조상의 추상메서드를 구현 */
//     }
//     int currentAlbum; // 현재 재생 중인 앨범
//     void nextAlbum() {

//     }
//     void preAlbum() {

//     }
// }

// abstract class Animal {
//      String name;
//      void view() {};
//      abstract void disp();
// }
// class Lion extends Animal {
//     @Override // 부모 쪽에 있는 것을 상속받았다는 뜻으로 명시적
//     void disp() {
//         System.out.println("사자");
//     }
// }
// class Tiger extends Animal {
//     @Override
//     void disp() {
//         System.out.println("호랑이");
//     }
// }
// class Review {
//     public static void main(String[] args) {
//         Lion li = new Lion();
//         li.disp();

//         Tiger ti = new Tiger();
//         ti.disp();

//         Animal ani =new Lion();
//         ani.disp();

//         ani = new Tiger();
//         ani.disp();
//     }
// }

// interface catWolrd {
//     // public void call() {} //필요x
//     public void call(); //추상 메소드
// }
// class interfaceTest implements catWolrd {
//     @Override
//     public void call() {
//         System.out.println("야옹 야옹!");
//     }
//     public static void main(String[] args) {
//         interfaceTest it = new interfaceTest();
//         it.call();
//     }
// }

// interface catWorld {
//     public void call(); // 메서드 원형만 만들면 끝이고 안에 구현체는 따로 없다
// } 
// class InterfaceTest implements catWorld {
//     @Override
//     public void call() { // 오버라이드
//         System.out.println("야옹야옹!");
//     }
//     public static void main(String[] args) {
//         InterfaceTest it = new InterfaceTest();
//         it.call();
//     }
// }

interface Animal {
    public void eat(String bab);
    public void work(String move);
    public void sleep(String zzz);
}
class Cat implements Animal {
    @Override //
    public void eat(String bab) {
        System.out.println("고양이는 "+ bab + "을 먹어요.");
    }
    @Override
    public void work(String move) {
        System.out.println("고양이는 "+ move +"걸어요");
    }
    @Override
    public void sleep(String zzz) {
        System.out.println("고양이는 "+ zzz + "자요.");
    }
}
class Monkey implements Animal {
    @Override
    public void eat(String bab) {
        System.out.println("원숭이는 "+ bab + "을 먹어요.");
    }
    @Override
    public void work(String move) {
        System.out.println("원숭이는 "+ move +"걸어요");
    }
    @Override
    public void sleep(String zzz) {
        System.out.println("원숭이는 "+ zzz + "자요.");
    }
}
class Chicken implements Animal {
    @Override
    public void eat(String bab) {
        System.out.println("닭은 "+ bab + "을 먹어요.");
    }
    @Override
    public void work(String move) {
        System.out.println("닭은 "+ move +"걸어요");
    }
    @Override
    public void sleep(String zzz) {
        System.out.println("닭은 "+ zzz + "자요.");
    }
}
class interfaceTest {
    public static void main(String[] args) {
        Cat cat = new Cat();
        Monkey mo = new Monkey();
        Chicken ch = new Chicken();

        cat.eat("생선");
        mo.eat("과일");
        ch.eat("사료");

        cat.work("네 발로");
        mo.work("네 발 또는 두 발로");
        ch.work("두 발로");

        cat.sleep("엎드려서");
        mo.sleep("누워서");
        ch.sleep("서서");
    }
}

// 인터페이스 사용 이유는 협업에서 용이
